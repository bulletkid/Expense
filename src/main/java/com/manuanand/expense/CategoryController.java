package com.manuanand.expense;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/category") // This means URL's start with /expense (after Application path)
public class CategoryController {
	@Autowired // This means to get the bean called categoryRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private CategoryRepository categoryRepository;
	
	///
	// Category Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Category addCategory (
			@RequestParam String name, @RequestParam String type) { 

		// Validation for Category Type
		CategoryType categoryType = CategoryType.OTHER;
		if 	(type.equalsIgnoreCase("fashion") ) {
			categoryType = CategoryType.FASHION;
		}
		else if (type.equalsIgnoreCase("grocery") ) {
			categoryType = CategoryType.GROCERY;
		}
		else if (type.equalsIgnoreCase("fees") ) {
			categoryType = CategoryType.FEES;
		}
		else if (type.equalsIgnoreCase("mortgage") ) {
			categoryType = CategoryType.MORTGAGE;
		}
		else if (type.equalsIgnoreCase("electronics") ) {
			categoryType = CategoryType.ELECTRONICS;
		}
		else if (type.equalsIgnoreCase("gas") ) {
			categoryType = CategoryType.GAS;
		}

		Category newCategory = new Category();
		newCategory.setName(name);
		newCategory.setType(categoryType);
		
		categoryRepository.save(newCategory);
		
		return newCategory;
	}
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<Category> getAllCategories() {
		
		// This returns a JSON or XML with the users
		return categoryRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Category getSpecificCategory(@PathVariable String id) {
		
		Integer categoryId = null;
		try {
			categoryId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Category> category = categoryRepository.findById(categoryId);
		if (!category.isEmpty()) {
			return category.get();
		} 

		return null;
	}
}