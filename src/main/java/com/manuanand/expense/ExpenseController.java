package com.manuanand.expense;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/expense") // This means URL's start with /expense (after Application path)
public class ExpenseController {
	@Autowired // This means to get the bean called expenseRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ExpenseRepository expenseRepository;

	@Autowired // This means to get the bean called expenseRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private CategoryRepository categoryRepository;
	
	///
	// Expense Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Expense addExpense (
			@RequestParam Date expenseDate, @RequestParam String description,
			@RequestParam Double amount, @RequestParam Integer categoryId,
			@RequestParam (required = false) String comments) {

		// Check whether the category is valid
		Optional<Category> category = categoryRepository.findById(categoryId);
		if (category.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "category with ID" + categoryId + " not found");
		}
		
		Expense newExpense = new Expense();
		newExpense.setExpenseDate(expenseDate);
		newExpense.setDescription(description);
		newExpense.setAmount(amount);
		newExpense.setCategoryName(category.get().getName());
		newExpense.setComments(comments);
		
		expenseRepository.save(newExpense);
		
		return newExpense;
	}

	@GetMapping(path="/")
	public @ResponseBody Iterable<Expense> getAllCategories() {
		
		// This returns a JSON or XML with the users
		return expenseRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Expense getSpecificExpense(@PathVariable String id) {
		
		Integer expenseId = null;
		try {
			expenseId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Expense> expense = expenseRepository.findById(expenseId);
		if (!expense.isEmpty()) {
			return expense.get();
		} 

		return null;
	}
}